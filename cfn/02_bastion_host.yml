---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:

  BastionKeyName:
    Type: AWS::EC2::KeyPair::KeyName

  BastionEC2LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'

  BastionVPC:
    Type: AWS::EC2::VPC::Id

  BastionPublicSubnet01:
    Type: AWS::EC2::Subnet::Id

Resources:

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      ImageId: !Ref 'BastionEC2LatestAmiId'
      KeyName:
        Ref: BastionKeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: "0"
        GroupSet:
          - Ref: "EC2InstanceSecurityGroup"
        SubnetId:
          Ref: "BastionPublicSubnet01"
      Tags:
      - Key: Name
        Value: WORKSHOP-Bastion-Instance
      UserData: 
      IamInstanceProfile: !Ref BastionInstanceProfile

  BastionInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "BastionInstanceRole"

  BastionInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: EKSAllPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'eks:*'
                Resource: '*'
              - Effect: Allow
                Action: 'cloudformation:*'
                Resource: '*'
              - Effect: Allow
                Action: 'ec2:*'
                Resource: '*'
              - Effect: Allow
                Action: 'iam:*'
                Resource: '*'
              - Effect: Allow
                Action: 'ssm:*'
                Resource: '*'
              - Effect: Allow
                Action: 'autoscaling:*'
                Resource: '*'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
      Path: "/"

  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        VpcId:
          Ref: BastionVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

Outputs:

  EC2InstanceIP:
    Description: "The bastion instance public IP, $ ssh -A -i <YOUR_KEY_PAIR> ec2-user@<PUBLIC_IP>"
    Value: !GetAtt EC2Instance.PublicIp
